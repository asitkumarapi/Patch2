package com.example;


import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.security.KeyStore;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

import javax.net.ssl.SSLContext;

import org.apache.http.client.HttpClient;
import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContextBuilder;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.util.ResourceUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
@SpringBootApplication
public class TestCertApplication {
	
	public static void main(String[] args) {
		SpringApplication.run(TestCertApplication.class, args);
	}
	 /*
     * Create a RestTemplate bean, using the RestTemplateBuilder provided
     * by the auto-configuration.
     */
    @Bean
    RestTemplate restTemplate(RestTemplateBuilder builder) throws Exception {

        /*
         * Sample certs use the same password
         */
        char[] password = "changeit".toCharArray();
        char[] password2 = "Citibank4".toCharArray();

        /*
         * Create an SSLContext that uses client.jks as the client certificate
         * and the truststore.jks as the trust material (trusted CA certificates).
         * In this sample, truststore.jks contains ca.pem which was used to sign
         * both client.pfx and server.jks.
         */
        SSLContext sslContext = SSLContextBuilder
                .create()
                .loadKeyMaterial(loadPfx("classpath:MX-SIT1.pfx", password2), password2)
                //.loadTrustMaterial(ResourceUtils.getFile("classpath:cacerts"), password)
                .loadTrustMaterial(null,(certificate,authType) -> true)
                .build();

        /*
         * Create an HttpClient that uses the custom SSLContext
         */
        HttpClient client = HttpClients.custom()
                .setSSLContext(sslContext)
                .setSSLHostnameVerifier(new NoopHostnameVerifier())
                .build();

        /*
         * Create a RestTemplate that uses a request factory that references
         * our custom HttpClient
         */
        return builder
                .requestFactory(new HttpComponentsClientHttpRequestFactory(client))
                .build();
    }

    private KeyStore loadPfx(String file, char[] password) throws Exception {
        KeyStore keyStore = KeyStore.getInstance("PKCS12");
        File key = ResourceUtils.getFile(file);
        try (InputStream in = new FileInputStream(key)) {
            keyStore.load(in, password);
        }
        return keyStore;
    }

    /*
     * Web security configuration.
     */
    @Configuration
    static class WebSecurityConfig extends WebSecurityConfigurerAdapter {

        /*
         * Enable x509 client authentication.
         */
        @Override
        protected void configure(HttpSecurity http) throws Exception {
//            http.x509();
            http.csrf().disable();
        }

       }
   
	
}
//////////////////////////////////////////////////////////////
package com.example.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.example.model.ServiceResponse.ResponseData;
import com.example.model.unblockcard.UnBlockCardResponse;
import com.example.service.RestSSLService;


@RestController
public class RestSSLControler {
	UnBlockCardResponse response = null;
	ResponseData responseData = null;
	@Autowired
	RestSSLService service;
	
	
	@RequestMapping(value = "/block", method = RequestMethod.POST)
	public ResponseData blockCard(){
		
		ResponseData data  = service.blockCard();		
		return data;
	}
	
	@RequestMapping(value = "/unblock", method = RequestMethod.POST)
	public UnBlockCardResponse unBlockCard(){
		response = new UnBlockCardResponse();
		UnBlockCardResponse response  = service.unBlockCard();		
		return response;
	}
}
/////////////////////////////////////////////////////////////////////////////////////////////
package com.example.service.impl;

import org.json.JSONException;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import com.example.model.ServiceResponse.ResponseData;
import com.example.model.unblockcard.UnBlockCardResponse;
import com.example.service.RestSSLService;

@Service
public class RestSSLServiceImpl implements RestSSLService {

private static final Logger log = LoggerFactory.getLogger(RestSSLServiceImpl.class);	
	
@Autowired
RestTemplate rt;

	@Override
	public ResponseData blockCard() {		
		String blockService = "https://mt01vip1.mt01.mex.nsroot.net:10443/v1/card/afews/blkOvcAtch";
		//RequestData data = new RequestData();
		HttpHeaders headers = new HttpHeaders();
		headers.set("Content-Type","application/json");
		log.info("enter !!!!!!!!!");
		
		JSONObject jObject2  = new JSONObject();
		JSONObject jObject3  = new JSONObject();
		JSONObject jObject4  = new JSONObject();
		JSONObject jObject  = new JSONObject();
		try {
			jObject.put("mli_2xl_i_message_id","6004");
			 jObject.put("mli_2xl_i_version_nbr", "00");
			    jObject.put("mli_2xl_i_terminal_id", "ECLCARDSMX");
			    jObject.put("mli_2xl_i_user_id", "RG07925");
			    jObject.put("mli_2xl_i_timestamp", "2017-04-25-15.14.20.142014");
			    jObject.put("mli_2xl_i_org", "000");
			    jObject.put("mli_2xl_i_card_nbr", "0005449250000005891");
			    jObject.put("mli_2xl_i_ovc_cd", "7");
			    jObject.put("mli_2xl_i_ovc_pur_days", "10");
			    jObject4.put("mli_2xl_i_hdr_grp", jObject);
			    jObject3.put("mli_2xl_i_area", jObject4);	    
			    jObject2.put("EWOEW2XLOperation", jObject3);
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	   
	    
		HttpEntity<?> entity = new HttpEntity<>(jObject2.toString(), headers);
		ResponseEntity<ResponseData> serviceResp = rt.exchange(blockService, HttpMethod.POST,entity,ResponseData.class);
		log.info("Response ///////// " + serviceResp.getBody().getEWOEW2XLOperationResponse());
		return serviceResp.getBody();
	}

	@Override
	public UnBlockCardResponse unBlockCard() {
		
		String unBlockService = "https://mt01vip1.mt01.mex.nsroot.net:10443/v1/card/afews/blkOvcDtch";
		HttpHeaders headers = new HttpHeaders();
		headers.set("Content-Type","application/json");
		log.info("enter !!!!!!!!!");
		JSONObject jObject2  = new JSONObject();
		JSONObject jObject3  = new JSONObject();
		JSONObject jObject4  = new JSONObject();
		JSONObject jObject  = new JSONObject();
		try {
			jObject.put("mli_2xm_i_message_id","6004");
			 jObject.put("mli_2xm_i_version_nbr", "00");
			    jObject.put("mli_2xm_i_terminal_id", "ECLCARDSMX");
			    jObject.put("mli_2xm_i_user_id", "RG07925");
			    jObject.put("mli_2xm_i_timestamp", "2017-04-25-15.14.20.142014");
			    jObject.put("mli_2xm_i_org", "000");
			    jObject.put("mli_2xm_i_card_nbr", "0005449250000005891");
			    jObject4.put("mli_2xm_i_hdr_grp", jObject);
			    jObject3.put("mli_2xm_i_area", jObject4);	    
			    jObject2.put("EWOEW2XMOperation", jObject3);
		} catch (JSONException e) {
			e.printStackTrace();
		}
	   
	    
		HttpEntity<?> entity = new HttpEntity<>(jObject2.toString(), headers);
		ResponseEntity<UnBlockCardResponse> serviceResp1 = rt.exchange(unBlockService, HttpMethod.POST,entity,UnBlockCardResponse.class);
		log.info("Unblock card Response ///////// " + serviceResp1.getBody());
		return serviceResp1.getBody();
	}

}
////////////////////////////////////
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.example.test</groupId>
	<artifactId>TestCert</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>TestCert</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.3.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.ws</groupId>
			<artifactId>spring-ws-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.ws</groupId>
			<artifactId>spring-ws-support</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.ws</groupId>
			<artifactId>spring-ws-core</artifactId>
		</dependency>

		<dependency>
   <groupId>org.json</groupId>
   <artifactId>json</artifactId>
   <version>20080701</version>
</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
</project>
